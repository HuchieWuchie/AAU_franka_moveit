<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <arg name="db_path" default="$(find panda_arm_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="pipeline" default="ompl" />

  <rosparam command="load" file="$(find franka_ros_controllers)/config/ros_controllers.yaml" ns="/franka_ros_interface"/>
  <arg name="load_gripper" default="true" />
  <arg name="rate" default="1000" />
  <arg name="start_controllers" default="true" />
  <arg name="start_moveit" default="true" />
  <arg name="fake_execution" default="false" /> <!-- Only valid if running moveit movegroup (start_moveit:=true) -->

  <!-- Panda Control Interface -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find ws_description)/urdf/panda_arm_hand.urdf.xacro'" if="$(arg load_gripper)" />

  <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
    <arg name="robot_ip" value="172.16.0.2" />
  </include>

  <!-- Start the custom_franka_control_node for advertising controller services and starting custom controller manager-->
  <rosparam command="load" file="$(find franka_interface)/config/robot_config.yaml"/>
  <param name="/robot_config/robot_ip" type="str" value="172.16.0.2" />
  <node name="franka_control" pkg="franka_interface" type="custom_franka_control_node" output="screen" required="true" >
    <!-- <rosparam command="load" file="$(find franka_control)/config/custom_franka_control_node.yaml" /> -->
    <!-- <param name="robot_ip" value="$(env FRANKA_ROBOT_IP)" /> -->
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>

  <!-- Start the custom state publisher for franka_ros_interface -->
  <rosparam command="load" file="$(find franka_interface)/config/basic_controllers.yaml"/>
  <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_ros_interface/custom_franka_state_controller" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>
  <!-- Start joint_state_publisher with the joint states of the robot -->
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states] </rosparam>
    <param name="rate" value="$(arg rate)"/>
  </node>
  <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired] </rosparam>
    <param name="rate" value="$(arg rate)"/>
    <remap from="/joint_states" to="/joint_states_desired" />
  </node>

  <node name="controllers" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

  <!-- Load the custom controllers -->
  <group if="$(eval arg('start_controllers') == true)">
    <node name="load_controllers" pkg="controller_manager" type="controller_manager" respawn="false"
                      output="screen" args="load
                                           franka_ros_interface/effort_joint_impedance_controller
                                           franka_ros_interface/effort_joint_position_controller
                                           franka_ros_interface/effort_joint_torque_controller
                                           franka_ros_interface/velocity_joint_velocity_controller
                                           franka_ros_interface/position_joint_position_controller"/>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="base_to_link0" args="0 0 0 0 0 0 1 base panda_link0 100" />
  <node pkg="tf" type="static_transform_publisher" name="world_to_base" args="0 0 0 0 0 0 1 world base 100" />
  <group if="$(eval arg('start_moveit') == true)">
    <include file="$(find panda_moveit_config)/launch/move_group.launch">
      <arg name="fake_execution" value="$(arg fake_execution)" />
      <arg name="load_gripper" value="$(arg load_gripper)" />
      <arg name="info" value="true" />
    </include>
  </group>

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="rviz_tutorial" default="true" />
  <arg name="use_gui" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find panda_arm_moveit_config)/launch/planning_context.launch">
    <!-- <arg name="load_robot_description" value="true"/> -->
    <!-- <arg name="load_gripper" value="$(arg load_gripper)"/> -->
  </include>

<arg unless="$(arg debug)" name="launch_prefix" value="" />
<arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
  <!-- Run Rviz -->
<node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false"
  args="-d $(find franka_moveit)/config/moveit_demo.rviz" output="screen">
  <rosparam command="load" file="$(find panda_arm_moveit_config)/config/kinematics.yaml"/>
</node>

  <!-- If database loading was enabled, start mongodb as well -->
<include file="$(find panda_arm_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
  <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
</include>


</launch>
